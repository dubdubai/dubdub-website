{
  "version": 3,
  "sources": ["../../bin/live-reload.js", "../../src/db/videoDataStructure.ts", "../../src/db/videoTabs.ts", "../../src/db/dbHome.ts"],
  "sourcesContent": ["new EventSource(`${SERVE_ORIGIN}/esbuild`).addEventListener('change', () => location.reload());\n", "const videoLinks = [\n  {\n    title: 'content creator',\n    id: 1,\n    posterImg:\n      'https://uploads-ssl.webflow.com/64a1953c1a72bd5a81a24f3d/64b2dd8d4c059eab34058ca3_videocover-min.webp',\n    englishVideo: 'http://twitter.com',\n    spanish: 'http://google.com',\n    spanishLatin: 'http://google.com',\n    marathi: 'http://google.com',\n    german: 'http://google.com',\n    hindi: 'http://google.com',\n    cantonese: 'http://google.com',\n  },\n  {\n    title: 'content creator',\n    id: 2,\n    posterImg: 'https://unsplash.com/s/photos/img',\n    englishVideo: 'http://google.com',\n    spanish: 'http://google.com',\n    spanishLatin: 'http://google.com',\n    marathi: 'http://google.com',\n    german: 'http://google.com',\n    hindi: 'http://google.com',\n    cantonese: 'http://google.com',\n  },\n  {\n    title: 'animation',\n    id: 3,\n    posterImg: 'https://unsplash.com/s/photos/img',\n    englishVideo: 'http://google.com',\n    spanish: 'http://google.com',\n    spanishLatin: 'http://google.com',\n    marathi: 'http://google.com',\n    german: 'http://google.com',\n    hindi: 'http://google.com',\n    cantonese: 'http://google.com',\n  },\n  {\n    title: 'Documentaries',\n    id: 4,\n    posterImg: 'https://unsplash.com/s/photos/img',\n    englishVideo: 'http://google.com',\n    spanish: 'http://google.com',\n    spanishLatin: 'http://google.com',\n    marathi: 'http://google.com',\n    german: 'http://google.com',\n    hindi: 'http://google.com',\n    cantonese: 'http://google.com',\n  },\n  {\n    title: 'tutorials',\n    id: 5,\n    posterImg: 'https://unsplash.com/s/photos/img',\n    englishVideo: 'http://google.com',\n    spanish: 'http://google.com',\n    spanishLatin: 'http://google.com',\n    marathi: 'http://google.com',\n    german: 'http://google.com',\n    hindi: 'http://google.com',\n    cantonese: 'http://google.com',\n  },\n  {\n    title: 'entertainment',\n    id: 6,\n    posterImg: 'https://unsplash.com/s/photos/img',\n    englishVideo: 'http://google.com',\n    spanish: 'http://google.com',\n    spanishLatin: 'http://google.com',\n    marathi: 'http://google.com',\n    german: 'http://google.com',\n    hindi: 'http://google.com',\n    cantonese: 'http://google.com',\n  },\n  {\n    title: 'coorporate videos',\n    id: 7,\n    posterImg: 'https://unsplash.com/s/photos/img',\n    englishVideo: 'http://google.com',\n    spanish: 'http://google.com',\n    spanishLatin: 'http://google.com',\n    marathi: 'http://google.com',\n    german: 'http://google.com',\n    hindi: 'http://google.com',\n    cantonese: 'http://google.com',\n  },\n  {\n    title: 'news',\n    id: 8,\n    posterImg: 'https://unsplash.com/s/photos/img',\n    englishVideo: 'http://google.com',\n    spanish: 'http://google.com',\n    spanishLatin: 'http://google.com',\n    marathi: 'http://google.com',\n    german: 'http://google.com',\n    hindi: 'http://google.com',\n    cantonese: 'http://google.com',\n  },\n];\n\nexport default videoLinks;\n", "import videoLinks from './videoDataStructure';\n\n//console.log(videoLinks);\n\nconst vidTabbtn = [...document.querySelectorAll('.tab-btn')];\n//const langBtn = [...document.querySelectorAll('.lng-btn')];\nconst langBtnWrap = document.querySelector('.language-wrap') as HTMLElement;\n//const langBtnFirst = document.querySelector('.lng-btn');\n\nconst activeVidbtn = vidTabbtn.filter((el) => {\n  return el.hasAttribute('db-tab');\n});\n\nexport const handleVideoUpdate = function () {\n  const videoUrlWrap = document.querySelector('[db-element=\"video\"]') as HTMLVideoElement;\n  const videoSourceUrl = videoUrlWrap.querySelector('source') as HTMLSourceElement;\n\n  //  console.log(langBtnWrap.children);\n\n  langBtnWrap.addEventListener('click', (e) => {\n    const clickedTarget = e.target as HTMLAnchorElement;\n    const btnchild = [...langBtnWrap.children];\n    btnchild.forEach((btn) => {\n      btn.classList.remove('is-active');\n    });\n\n    ///adding active class to the clicked element\n    clickedTarget.classList.add('is-active');\n    //  btnchild.;\n    //console.log(clickedTarget);\n    ////remove active class from any child element\n    const posterImgUrl = clickedTarget.getAttribute('posterimg');\n    const videoUrl = clickedTarget.getAttribute('video-url');\n\n    videoUrlWrap.poster = `${posterImgUrl}`;\n    videoSourceUrl.src = `${videoUrl}`;\n  });\n};\n\nexport const videoTab = function () {\n  const updateUrls = function (htmlWrapper: HTMLElement, data) {\n    htmlWrapper.innerHTML = `<a posterimg=\"${data.posterImg}\" video-url=\"${data.englishVideo}\" href=\"#\" class=\"lng-btn w-button\">US English</a><a posterimg=\"${data.posterImg}\" video-url=\"${data.spanish}\" href=\"#\" class=\"lng-btn w-button\">Spanish(Portugese)</a><a posterimg=\"${data.posterImg}\" video-url=\"${data.spanishLatin}\" href=\"#\" class=\"lng-btn w-button\">Spanish(Latin)</a><a posterimg=\"${data.posterImg}\" video-url=\"${data.marathi}\" href=\"#\" class=\"lng-btn w-button\">Marathi</a><a posterimg=\"${data.posterImg}\" video-url=\"${data.german}\" href=\"#\" class=\"lng-btn w-button\">German</a><a posterimg=\"${data.posterImg}\" video-url=\"${data.hindi}\" href=\"#\" class=\"lng-btn w-button\">Hindi</a><a posterimg=\"${data.posterImg}\" video-url=\"${data.cantonese}\" href=\"#\" class=\"lng-btn w-button\">Cantonese</a>`;\n  };\n\n  //<div class=\"language-wrap\"><a posterimg=\"\" english-url=\"\" href=\"#\" class=\"lng-btn is-active w-button\">US English</a><a posterimg=\"\" spanish-port=\"\" href=\"#\" class=\"lng-btn w-button\">Spanish(Portugese)</a><a posterimg=\"\" spanish-latin=\"\" href=\"#\" class=\"lng-btn w-button\">Spanish(Latin)</a><a posterimg=\"\" marathi-url=\"\" href=\"#\" class=\"lng-btn w-button\">Marathi</a><a posterimg=\"\" german-url=\"\" href=\"#\" class=\"lng-btn w-button\">German</a><a posterimg=\"\" hindi-url=\"\" href=\"#\" class=\"lng-btn w-button\">Hindi</a><a posterimg=\"\" cantonese-url=\"\" href=\"#\" class=\"lng-btn w-button\">Cantonese</a></div>\n\n  // console.log(langBtnWrap);\n  activeVidbtn.forEach((btn) => {\n    btn.addEventListener('click', () => {\n      ////remove active class from other btn\n      activeVidbtn.forEach((btn) => {\n        btn.classList.remove('active');\n      });\n      ////add the active class to the clicked element\n      btn.classList.add('active');\n\n      const attNum = btn.getAttribute('db-tab');\n      if (!attNum) return;\n      const btnNum: number = +attNum;\n      //console.log(btnNum);\n      const urlDetails = videoLinks.find((links) => {\n        return links.id === btnNum;\n      });\n      updateUrls(langBtnWrap, urlDetails);\n    });\n  });\n  ////performing the click function on page load\n  const [firstbtn] = activeVidbtn;\n  firstbtn.click();\n};\n\n//<a posterimg=\"https://unsplash.com/s/photos/img\" english-url=\"http://google.com\" href=\"#\" class=\"lng-btn w-button\">US English</a>\n//is-active\n// <div class=\"language-wrap\"><a href=\"#\" class=\"lng-btn is-active w-button\">US English</a><a href=\"#\" class=\"lng-btn w-button\">Spanish(Portugese)</a><a href=\"#\" class=\"lng-btn w-button\">Spanish(Latin)</a><a href=\"#\" class=\"lng-btn w-button\">Marathi</a><a href=\"#\" class=\"lng-btn w-button\">German</a><a href=\"#\" class=\"lng-btn w-button\">Hindi</a><a href=\"#\" class=\"lng-btn w-button\">Cantonese</a></div>\n\n// <div class=\"language-wrap\"><a href=\"#\" class=\"lng-btn is-active w-button\">US English</a><a href=\"#\" class=\"lng-btn w-button\">Spanish(Portugese)</a><a href=\"#\" class=\"lng-btn w-button\">Spanish(Latin)</a><a href=\"#\" class=\"lng-btn w-button\">Marathi</a><a href=\"#\" class=\"lng-btn w-button\">German</a><a href=\"#\" class=\"lng-btn w-button\">Hindi</a><a href=\"#\" class=\"lng-btn w-button\">Cantonese</a></div>\n\n// <div class=\"language-wrap\"><a english-url=\"\" href=\"#\" class=\"lng-btn is-active w-button\">US English</a><a spanish-port=\"\" href=\"#\" class=\"lng-btn w-button\">Spanish(Portugese)</a><a spanish-latin=\"\" href=\"#\" class=\"lng-btn w-button\">Spanish(Latin)</a><a marathi-url=\"\" href=\"#\" class=\"lng-btn w-button\">Marathi</a><a german-url=\"\" href=\"#\" class=\"lng-btn w-button\">German</a><a hindi-url=\"\" href=\"#\" class=\"lng-btn w-button\">Hindi</a><a cantonese-url=\"\" href=\"#\" class=\"lng-btn w-button\">Cantonese</a></div>\n", "import { handleVideoUpdate, videoTab } from './videoTabs';\n\nwindow.Webflow ||= [];\nwindow.Webflow.push(() => {\n  console.log('Db script loaded');\n\n  // const AudioContext = window.AudioContext || window.webkitAudioContext;\n\n  const dbAudioEl = document.querySelectorAll('[db-audio]');\n  const audioHtml = document.getElementById('newAudio') as HTMLAudioElement;\n  const audioLinks = document.querySelectorAll('audio');\n  const canvasEl = document.querySelector('#audWave') as HTMLCanvasElement;\n  // console.log(canvasEl);\n  const HEIGHT = 150;\n  const WIDTH = 500;\n  const ctx = canvasEl.getContext('2d');\n  canvasEl.width = WIDTH;\n  canvasEl.height = HEIGHT;\n\n  videoTab();\n  handleVideoUpdate();\n\n  //let audioSource;\n  let analyzer;\n  let bufferLenth: number;\n\n  //console.log(audioLinks);\n\n  if (!dbAudioEl || !ctx) return;\n\n  // const audioSources = [] as Array<MediaElementAudioSourceNode>;\n  // const audioContexts = [] as Array<AudioContext>;\n\n  // audioLinks.forEach((audio, i) => {\n  //   const audCtx = new AudioContext();\n  //   const audioSource = audCtx.createMediaElementSource(audio);\n  //   audio.setAttribute(`audioel`, `${i + 1}`);\n  //   audio.classList.add('audiokoko');\n  //   analyzer = audCtx.createAnalyser();\n  //   audioSource.connect(analyzer);\n  //   analyzer.connect(audCtx.destination);\n  //   analyzer.fftSize = 64;\n  //   bufferLenth = analyzer.frequencyBinCount;\n  //   console.log(bufferLenth);\n\n  //   //Pusing and creating array for tha audio context and audio souces\n  //   audioSources.push(audioSource);\n  //   audioContexts.push(audCtx);\n  // });\n\n  //console.log(audioSources);\n  // console.log(audioContexts);\n\n  dbAudioEl.forEach((el, i) => {\n    el.addEventListener('click', function (e) {\n      const audio = el.querySelector('audio') as HTMLAudioElement;\n      console.log(audio);\n\n      audioLinks.forEach((audio: HTMLAudioElement) => {\n        if (!audio.pause) return;\n        audio.pause();\n        audio.currentTime = 0;\n      });\n\n      audio.play();\n\n      // const audNum = audEl.getAttribute(`audioel`);\n\n      //console.log(audioCOntexts[0]);\n      // console.log(audioCOntexts[i]);\n      // analyzer = audioSources[+audNum].createAnalyser();\n      ////  audioSources[+audNum].connect(analyzer);\n      // audioContexts[+audNum];\n      //console.log(audioSources[+audNum]);\n\n      //analyzer.connect(audioContexts[+audNum].destination);\n      // console.log(analyzer.fftSize);\n      //     // analyzer.fftSize = 1024; ///////How much data we want to collect\n      //     // bufferLenth = analyzer.frequencyBinCount;\n      //     //console.log(bufferLenth);\n    });\n  });\n\n  ////Working with the audio array\n  // audioLinks.forEach((audio, i) => {\n  //   const audContenxt = new AudioContext();\n  //   const audioSource = audContenxt.createMediaElementSource(audio);\n  //   audio.setAttribute(`audio`, `${i + 1}`);\n  //   console.log(audio);\n  //   //console.log(audioSource);\n  //   audioCOntexts.push(audioSource);\n\n  // audio.play();\n  // dbAudioEl.forEach((el, i) => {\n  //   el.addEventListener('click', function (e) {\n  //     // console.log(audio);\n  //     // if(audio.hasAttribute(`audio`))\n  //     const clickedAud = el.querySelector('audio');\n  //     console.log(clickedAud);\n  //   });\n  // });\n  //});\n\n  // console.log(audioCOntexts);\n\n  // dbAudioEl.forEach((el, h) => {\n  //   el.addEventListener('click', function (e) {\n  //     // console.log(audio);\n  //     // if(audio.hasAttribute(`audio`))\n\n  //     const clickedAud = el.querySelector('[audio=\"1\"]');\n  //     console.log(clickedAud, h);\n  //   });\n  // });\n\n  ///handle class toggleing\n  // dbAudioEl.forEach((el) => {\n  //   el.addEventListener('click', function (e) {\n  //     const audioLink = el.querySelector('audio') as HTMLAudioElement;\n  //     console.log(audioLink, e);\n\n  //     const audioCtx = new AudioContext();\n  //     // const newAudio = new Audio(audioLink.src);\n  //     // newAudio.setAttribute('cross-origin', 'anonymous');\n  //     // console.log(newAudio);\n  //     const audioSource = audioCtx.createMediaElementSource(audioLink);\n  //     console.log(audioSource, audioLink);\n  //     // audioLink.play();\n\n  //     //const audioLink = el.querySelector('audio') as HTMLAudioElement;\n  //     ////remove the class Playing from other elements\n  //     dbAudioEl.forEach((el) => {\n  //       el.classList.remove('playing');\n  //     });\n\n  //     ///check if any other audio is playing and pause it\n  //     audioLinks.forEach((audio: HTMLAudioElement) => {\n  //       if (!audioLink.paused) return;\n\n  //       audio.pause();\n  //       audio.currentTime = 0;\n  //     });\n  //     /// adding playing class to the current Clicked Elements and getting the audio elements\n  //     this.classList.add('playing');\n  //     //audioLink.play();\n\n  //     // const audioSource = audioCtx.createMediaElementSource(audioLink);\n  //     // analyzer = audioCtx.createAnalyser();\n  //     // audioSource.connect(analyzer);\n  //     // analyzer.connect(audioCtx.destination);\n  //     // analyzer.fftSize = 1024;\n  //     // bufferLenth = analyzer.frequencyBinCount;\n  //     // console.log(bufferLenth);\n  //     // console.log('je;');\n  //     //getAudio(audioLink);\n\n  //     // if (audioCtx.state === 'suspended') {\n  //     //   audioCtx.resume();\n  //     //   //audioLink.play();\n  //     // }\n\n  //     // const audioSource = audioCtx.createMediaElementSource(audioLink);\n  //     //analyzer = audioCtx.createAnalyser();\n  //     //  audioSource.connect(analyzer);\n  //     //analyzer.connect(audioCtx.destination);\n  //     // analyzer.fftSize = 1024; ///////How much data we want to collect\n  //     // bufferLenth = analyzer.frequencyBinCount;\n  //     //console.log(bufferLenth);\n\n  //     // const timeData = new Uint8Array(bufferLenth);\n  //     // const freqData = new Uint8Array(bufferLenth);\n\n  //     // function drawTimeData() {\n  //     //   let x: number;\n  //     //   //console.log(timeData);\n\n  //     //   analyzer.getByteTimeDomainData(timeData); //inject the time data into our timeData array\n  //     //   //1 clear the canvas\n\n  //     //   //set up some canvas drawing\n  //     //   ctx.lineWidth = 3;\n  //     //   ctx.strokeStyle = 'round';\n  //     //   ctx.strokeStyle = '#796EAD80';\n  //     //   ctx?.beginPath();\n  //     //   const sliceWidth = WIDTH / bufferLenth;\n  //     //   x = 0;\n  //     //   ctx?.clearRect(0, 0, WIDTH, HEIGHT);\n  //     //   // timeData.forEach((data, i) => {\n  //     //   //   barHeight = data[i] * 2;\n  //     //   //   ctx.fillStyle = '#796EAD80';\n  //     //   //   ctx?.fillRect(x, canvasEl.height - barHeight, sliceWidth, barHeight);\n  //     //   //   x += sliceWidth;\n  //     //   // });\n\n  //     //   timeData.forEach((data: number, i: number) => {\n  //     //     const v = data / 128;\n  //     //     const y = (v * HEIGHT) / 2;\n  //     //     // Draw the lines\n  //     //     if (i === 0) {\n  //     //       ctx?.moveTo(x, y);\n  //     //     } else {\n  //     //       ctx?.lineTo(x, y);\n  //     //     }\n  //     //     x += sliceWidth;\n  //     //   });\n  //     //   ctx?.stroke();\n  //     //   // console.log(sliceWidth);\n  //     //   requestAnimationFrame(drawTimeData);\n  //     //   //requestAnimationFrame(() => drawTimeData()); //call itself as soon as possible\n  //     // }\n  //     // drawTimeData();\n\n  //     // drawTimeData(timeData);\n  //     //drawTimeData();\n  //     // console.log(src)\n  //     // getAudio(audioLink);\n  //     //audioLink?.play();\n  //   });\n  // });\n\n  //function getAudio(src: HTMLAudioElement) {\n  //const linkAud = src.src;\n  //const audsource = await fetch(linkAud);\n  //const audData = await audsource.arrayBuffer();\n  // const decodedAudio = await audioCtx.decodeAudioData(audData);\n  //decodedAudio.connect(analyzer);\n  //const playSound = audioCtx.createBufferSource(); ////this method create media source like createMediaSouce method\n  //playSound.buffer = decodedAudio;\n  //playSound.connect(analyzer); //////connect the sound source to an analyser\n  //console.log(analyzer);\n  //src.play();\n  // playSound.connect(audioCtx.destination);\n  // playSound.start();\n  // playSound.start(audioCtx.currentTime);\n  //console.log(timeData);\n  //console.log(playSound.connect(analyzer));\n  //console.log(decodedAudio);\n  // audioCtx.createMediaStreamSource(playSound.buffer);\n  //audioCtx.createMediaElementSource();\n  //console.log(decodedAudio); //audiobuffer\n  //const source = audioCtx.createMediaStreamSource(decodedAudio);\n  //source.connect(analyzer);\n  // src.play();\n  // }\n\n  //let barHeight;\n  // let x: number;\n  // function drawTimeData(timeData) {\n  //   console.log(timeData);\n  //   analyzer.getByteTimeDomainData(timeData); //inject the time data into our timeData array\n  //   //1 clear the canvas\n\n  //   //set up some canvas drawing\n\n  //   ctx.lineWidth = 3;\n  //   ctx.strokeStyle = 'round';\n  //   ctx.strokeStyle = '#796EAD80';\n  //   ctx?.beginPath();\n  //   const sliceWidth = WIDTH / bufferLenth;\n  //   x = 0;\n  //   ctx?.clearRect(0, 0, WIDTH, HEIGHT);\n  //   // timeData.forEach((data, i) => {\n  //   //   barHeight = data[i] * 2;\n  //   //   ctx.fillStyle = '#796EAD80';\n  //   //   ctx?.fillRect(x, canvasEl.height - barHeight, sliceWidth, barHeight);\n  //   //   x += sliceWidth;\n  //   // });\n\n  //   timeData.forEach((data: number, i: number) => {\n  //     const v = data / 128;\n  //     const y = (v * HEIGHT) / 2;\n  //     // Draw the lines\n  //     if (i === 0) {\n  //       ctx?.moveTo(x, y);\n  //     } else {\n  //       ctx?.lineTo(x, y);\n  //     }\n  //     x += sliceWidth;\n  //   });\n  //   ctx?.stroke();\n  //   // console.log(sliceWidth);\n  //   //requestAnimationFrame(drawTimeData);\n  //   requestAnimationFrame(() => drawTimeData(timeData)); //call itself as soon as possible\n  // }\n});\n\n// audio.paused ? Audio.play() : Audio.pause();\n// const draw = normalizedData => {\n//   // Set up the canvas\n//   const canvas = document.querySelector(\"canvas\");\n//   const dpr = window.devicePixelRatio || 1;\n//   const padding = 20;\n//   canvas.width = canvas.offsetWidth * dpr;\n//   canvas.height = (canvas.offsetHeight + padding * 2) * dpr;\n//   const ctx = canvas.getContext(\"2d\");\n//   ctx.scale(dpr, dpr);\n//   ctx.translate(0, canvas.offsetHeight / 2 + padding); // Set Y = 0 to be in the middle of the canvas\n\n//   // draw the line segments\n//   const width = canvas.offsetWidth / normalizedData.length;\n//   for (let i = 0; i < normalizedData.length; i++) {\n//     const x = width * i;\n//     let height = normalizedData[i] * canvas.offsetHeight - padding;\n//     if (height < 0) {\n//         height = 0;\n//     } else if (height > canvas.offsetHeight / 2) {\n//         height = height > canvas.offsetHeight / 2;\n//     }\n//     drawLineSegment(ctx, x, height, width, (i + 1) % 2);\n//   }\n// };\n"],
  "mappings": "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",
  "names": ["btn", "audio"]
}
