{
  "version": 3,
  "sources": ["../../bin/live-reload.js", "../../src/db/videoDataStructure.ts", "../../src/db/videoTabs.ts", "../../src/db/dbHomeNew.ts"],
  "sourcesContent": ["new EventSource(`${SERVE_ORIGIN}/esbuild`).addEventListener('change', () => location.reload());\n", "const videoLinks = [\n  {\n    language: 'english',\n    id: 1 as number,\n    posterImg: '',\n    contentcreator1:\n      'https://dl.dropboxusercontent.com/s/6ozrrrfnti2fmty/Input%20website%20videos.mp4' as string,\n    contentcreator2:\n      'https://dl.dropboxusercontent.com/s/6ozrrrfnti2fmty/Input%20website%20videos.mp4' as string,\n    animation:\n      'https://dl.dropboxusercontent.com/s/6ozrrrfnti2fmty/Input%20website%20videos.mp4' as string,\n    documentaries:\n      'https://dl.dropboxusercontent.com/s/6ozrrrfnti2fmty/Input%20website%20videos.mp4' as string,\n    tutorials: 'http://google.com' as string,\n    entertainment: 'http://google.com' as string,\n    coorporateVideos: 'http://google.com' as string,\n    news: 'https://dl.dropboxusercontent.com/s/6ozrrrfnti2fmty/Input%20website%20videos.mp4' as string,\n  },\n  {\n    language: 'Spanish(port)' as string,\n    id: 2 as number,\n    posterImg: 'https://unsplash.com/s/photos/img' as string,\n    contentcreator1: 'http://google.com' as string,\n    contentcreator2: 'http://google.com' as string,\n    animation: 'http://google.com' as string,\n    documentaries: 'http://google.com' as string,\n    tutorials: 'http://google.com' as string,\n    entertainment: 'http://google.com' as string,\n    coorporateVideos: 'http://google.com' as string,\n    news: 'https://dl.dropboxusercontent.com/s/6ozrrrfnti2fmty/Input%20website%20videos.mp4' as string,\n  },\n  {\n    language: 'spanish(latin)' as string,\n    id: 3 as number,\n    posterImg: 'https://unsplash.com/s/photos/img' as string,\n    contentcreator1: 'http://google.com' as string,\n    contentcreator2: 'http://google.com' as string,\n    animation: 'http://google.com' as string,\n    documentaries: 'http://google.com' as string,\n    tutorials: 'http://google.com' as string,\n    entertainment: 'http://google.com' as string,\n    coorporateVideos: 'http://google.com' as string,\n    news: 'http://google.com' as string,\n  },\n  {\n    language: 'marathi' as string,\n    id: 4 as number,\n    posterImg: 'https://unsplash.com/s/photos/img' as string,\n    contentcreator1: 'http://google.com' as string,\n    contentcreator2: 'http://google.com' as string,\n    animation: 'http://google.com' as string,\n    documentaries: 'http://google.com' as string,\n    tutorials: 'http://google.com' as string,\n    entertainment: 'http://google.com' as string,\n    coorporateVideos: 'http://google.com' as string,\n    news: 'http://google.com' as string,\n  },\n  {\n    language: 'german',\n    id: 5 as number,\n    posterImg: 'https://unsplash.com/s/photos/img' as string,\n    contentcreator1: 'http://google.com' as string,\n    contentcreator2: 'http://google.com' as string,\n    animation: 'http://google.com' as string,\n    documentaries: 'http://google.com' as string,\n    tutorials: 'http://google.com' as string,\n    entertainment: 'http://google.com' as string,\n    coorporateVideos: 'http://google.com' as string,\n    news: 'http://google.com' as string,\n  },\n  {\n    language: 'hindi' as string,\n    id: 6 as number,\n    posterImg: 'https://unsplash.com/s/photos/img' as string,\n    contentcreator1: 'http://google.com' as string,\n    contentcreator2: 'http://google.com' as string,\n    animation: 'http://google.com' as string,\n    documentaries: 'http://google.com' as string,\n    tutorials: 'http://google.com' as string,\n    entertainment: 'http://google.com' as string,\n    coorporateVideos: 'http://google.com' as string,\n    news: 'http://google.com',\n  },\n  {\n    language: 'cantonese' as string,\n    id: 7 as number,\n    posterImg: 'https://unsplash.com/s/photos/img' as string,\n    contentcreator1: 'http://google.com' as string,\n    contentcreator2: 'http://google.com' as string,\n    animation: 'http://google.com' as string,\n    documentaries: 'http://google.com' as string,\n    tutorials: 'http://google.com' as string,\n    entertainment: 'http://google.com' as string,\n    coorporateVideos: 'http://google.com' as string,\n    news: 'http://google.com',\n  },\n];\n\nexport default videoLinks;\n", "import videoLinks from './videoDataStructure';\n\n//https://cdn.jsdelivr.net/gh/dubdubai/dubdub-website/master/dist/db/dbHome.js dubdub-website/blob/master/dist/index.js\n\nconst vidTabbtn = [...document.querySelectorAll('.tab-btn')];\nconst firstBtn = document.querySelector('[db-tab=\"1\"]') as HTMLAnchorElement;\n//const langBtnWrap = document.querySelector('.language-wrap') as HTMLElement;\nconst langBtnWrap = document.querySelector('[video-lang]');\nconst btnchild = [...langBtnWrap.children];\nconst playBtn = document.querySelector('[db-element=\"play\"]') as HTMLElement;\nconst videoUrlWrap = document.querySelector('[db-element=\"video\"]') as HTMLVideoElement;\nconst videoSourceUrl = videoUrlWrap.querySelector('source') as HTMLSourceElement;\nconst videoEl = document.querySelector('[db-element=\"video\"]') as HTMLVideoElement;\n\nconst activeVidbtn = vidTabbtn.filter((el) => {\n  return el.hasAttribute('db-tab');\n});\n\nconst renderVideo = function (url) {\n  videoUrlWrap.poster = `https://uploads-ssl.webflow.com/64a1953c1a72bd5a81a24f3d/64b2dd8d4c059eab34058ca3_videocover-min.webp`;\n  videoSourceUrl.src = `${url}`;\n  videoUrlWrap.load();\n  videoUrlWrap.play();\n  videoUrlWrap.muted = false;\n};\n\nexport const handleVideoUpdate = function () {\n  //  console.log(langBtnWrap.children);\n\n  langBtnWrap.addEventListener('click', (e) => {\n    const clickedTarget = e.target as HTMLAnchorElement;\n\n    btnchild.forEach((btn) => {\n      btn.classList.remove('is-active');\n    });\n\n    ///adding active class to the clicked element\n    clickedTarget.classList.add('is-active');\n\n    ///getting the tab Btn with active class\n    const activeTabBtn = activeVidbtn.find((btnLang) => btnLang.classList.contains('active'));\n    // console.log(activeTabBtn);\n    // console.log(clickedTarget);\n\n    const attNum = clickedTarget?.getAttribute('db-tab');\n    if (!attNum || !activeTabBtn) return;\n    const idNum: number = +attNum;\n    //console.log(idNum);\n    const urlDetails = videoLinks.find((links) => {\n      return links.id === idNum;\n    });\n\n    const getVideoName = activeTabBtn?.getAttribute('db-vidname');\n    // console.log(getVideoName);\n    if (!getVideoName) return;\n\n    const videoUrl = urlDetails[getVideoName];\n    renderVideo(videoUrl);\n    //console.log(videoUrl);\n  });\n};\n\nexport const videoTab = function () {\n  // console.log(langBtnWrap);\n  activeVidbtn.forEach((btn) => {\n    btn.addEventListener('click', () => {\n      ////remove active class from other btn\n      activeVidbtn.forEach((btn) => {\n        btn.classList.remove('active');\n      });\n      ////add the active class to the clicked element\n      btn.classList.add('active');\n\n      ////////Get the button with active class\n      const activeBtn = btnchild.find((btnLang) => btnLang.classList.contains('is-active'));\n      //console.log(activeBtn);\n      const clickedName = btn.getAttribute('db-vidname') as string;\n\n      const attNum = activeBtn?.getAttribute('db-tab');\n      if (!attNum || !clickedName) return;\n      const idNum: number = +attNum;\n      //console.log(idNum);\n      const urlDetails = videoLinks.find((links) => {\n        return links.id === idNum;\n      });\n\n      const videoUrl = urlDetails[clickedName];\n\n      renderVideo(videoUrl);\n      //console.log(videoUrl);\n    });\n  });\n\n  //select the fist element when scrolled into view\n  const vidTabSection = document.querySelector('[db-section=\"videotab\"]') as HTMLElement;\n  const vidContainer = document.querySelector('[db-element=\"video-container\"]') as HTMLElement;\n\n  if (!vidTabSection || !vidContainer) return;\n  const [firstTabBtn] = activeVidbtn;\n  const [firstLangBtn] = btnchild;\n\n  const videoActive = function (entries: Array<object>, et) {\n    entries.forEach((entry) => {\n      if (entry.isIntersecting) {\n        firstLangBtn.classList.add('is-active');\n        firstTabBtn.click();\n\n        //tabObserve.unobserve(vidTabSection);\n      } else {\n        videoEl.pause();\n      }\n    });\n  };\n  const options = {\n    threshold: 0.2,\n  };\n  const tabObserve = new IntersectionObserver(videoActive, options) as IntersectionObserver;\n\n  tabObserve.observe(vidContainer);\n};\n", "//import { animate } from './animation';\nimport { handleVideoUpdate, videoTab } from './videoTabs';\nwindow.Webflow ||= [];\nwindow.Webflow.push(() => {\n  console.log('Db script loaded');\n\n  // const AudioContext = window.AudioContext || window.webkitAudioContext;\n  //animate();\n  const dbAudioEl = document.querySelectorAll('[db-audio]');\n  //const audioHtml = document.getElementById('newAudio') as HTMLAudioElement;\n  const audioLinks = document.querySelectorAll('audio');\n  const canvasEl = document.querySelector('#audWave') as HTMLCanvasElement;\n  // console.log(canvasEl);\n  const HEIGHT = 150;\n  const WIDTH = 500;\n  const ctx = canvasEl.getContext('2d');\n  canvasEl.width = WIDTH;\n  canvasEl.height = HEIGHT;\n\n  videoTab();\n  handleVideoUpdate();\n\n  //let audioSource;\n  let analyzer;\n  let bufferLenth: number;\n\n  console.log(audioLinks);\n\n  if (!dbAudioEl || !ctx) return;\n\n  // const audioSources = [] as Array<MediaElementAudioSourceNode>;\n  // const audioContexts = [] as Array<AudioContext>;\n\n  // audioLinks.forEach((audio, i) => {\n  //   const audCtx = new AudioContext();\n  //   const audioSource = audCtx.createMediaElementSource(audio);\n  //   audio.setAttribute(`audioel`, `${i + 1}`);\n  //   audio.classList.add('audiokoko');\n  //   analyzer = audCtx.createAnalyser();\n  //   audioSource.connect(analyzer);\n  //   analyzer.connect(audCtx.destination);\n  //   analyzer.fftSize = 64;\n  //   bufferLenth = analyzer.frequencyBinCount;\n  //   console.log(bufferLenth);\n\n  //   //Pusing and creating array for tha audio context and audio souces\n  //   audioSources.push(audioSource);\n  //   audioContexts.push(audCtx);\n  // });\n\n  // console.log(audioSources);\n  // console.log(audioContexts);\n\n  dbAudioEl.forEach((el, i) => {\n    el.addEventListener('click', function (e) {\n      const audio = el.querySelector('audio') as HTMLAudioElement;\n      console.log(audio);\n\n      audioLinks.forEach((audio: HTMLAudioElement) => {\n        if (!audio.pause) return;\n        audio.pause();\n        audio.currentTime = 0;\n      });\n\n      audio.play();\n\n      // const audNum = audEl.getAttribute(`audioel`);\n\n      //console.log(audioCOntexts[0]);\n      // console.log(audioCOntexts[i]);\n      // analyzer = audioSources[+audNum].createAnalyser();\n      ////  audioSources[+audNum].connect(analyzer);\n      // audioContexts[+audNum];\n      //console.log(audioSources[+audNum]);\n\n      //analyzer.connect(audioContexts[+audNum].destination);\n      // console.log(analyzer.fftSize);\n      //     // analyzer.fftSize = 1024; ///////How much data we want to collect\n      //     // bufferLenth = analyzer.frequencyBinCount;\n      //     //console.log(bufferLenth);\n    });\n  });\n\n  ////Working with the audio array\n  // audioLinks.forEach((audio, i) => {\n  //   const audContenxt = new AudioContext();\n  //   const audioSource = audContenxt.createMediaElementSource(audio);\n  //   audio.setAttribute(`audio`, `${i + 1}`);\n  //   console.log(audio);\n  //   //console.log(audioSource);\n  //   audioCOntexts.push(audioSource);\n\n  // audio.play();\n  // dbAudioEl.forEach((el, i) => {\n  //   el.addEventListener('click', function (e) {\n  //     // console.log(audio);\n  //     // if(audio.hasAttribute(`audio`))\n  //     const clickedAud = el.querySelector('audio');\n  //     console.log(clickedAud);\n  //   });\n  // });\n  //});\n\n  // console.log(audioCOntexts);\n\n  // dbAudioEl.forEach((el, h) => {\n  //   el.addEventListener('click', function (e) {\n  //     // console.log(audio);\n  //     // if(audio.hasAttribute(`audio`))\n\n  //     const clickedAud = el.querySelector('[audio=\"1\"]');\n  //     console.log(clickedAud, h);\n  //   });\n  // });\n\n  ///handle class toggleing\n  // dbAudioEl.forEach((el) => {\n  //   el.addEventListener('click', function (e) {\n  //     const audioLink = el.querySelector('audio') as HTMLAudioElement;\n  //     console.log(audioLink, e);\n\n  //     const audioCtx = new AudioContext();\n  //     // const newAudio = new Audio(audioLink.src);\n  //     // newAudio.setAttribute('cross-origin', 'anonymous');\n  //     // console.log(newAudio);\n  //     const audioSource = audioCtx.createMediaElementSource(audioLink);\n  //     console.log(audioSource, audioLink);\n  //     // audioLink.play();\n\n  //     //const audioLink = el.querySelector('audio') as HTMLAudioElement;\n  //     ////remove the class Playing from other elements\n  //     dbAudioEl.forEach((el) => {\n  //       el.classList.remove('playing');\n  //     });\n\n  //     ///check if any other audio is playing and pause it\n  //     audioLinks.forEach((audio: HTMLAudioElement) => {\n  //       if (!audioLink.paused) return;\n\n  //       audio.pause();\n  //       audio.currentTime = 0;\n  //     });\n  //     /// adding playing class to the current Clicked Elements and getting the audio elements\n  //     this.classList.add('playing');\n  //     //audioLink.play();\n\n  //     // const audioSource = audioCtx.createMediaElementSource(audioLink);\n  //     // analyzer = audioCtx.createAnalyser();\n  //     // audioSource.connect(analyzer);\n  //     // analyzer.connect(audioCtx.destination);\n  //     // analyzer.fftSize = 1024;\n  //     // bufferLenth = analyzer.frequencyBinCount;\n  //     // console.log(bufferLenth);\n  //     // console.log('je;');\n  //     //getAudio(audioLink);\n\n  //     // if (audioCtx.state === 'suspended') {\n  //     //   audioCtx.resume();\n  //     //   //audioLink.play();\n  //     // }\n\n  //     // const audioSource = audioCtx.createMediaElementSource(audioLink);\n  //     //analyzer = audioCtx.createAnalyser();\n  //     //  audioSource.connect(analyzer);\n  //     //analyzer.connect(audioCtx.destination);\n  //     // analyzer.fftSize = 1024; ///////How much data we want to collect\n  //     // bufferLenth = analyzer.frequencyBinCount;\n  //     //console.log(bufferLenth);\n\n  //     // const timeData = new Uint8Array(bufferLenth);\n  //     // const freqData = new Uint8Array(bufferLenth);\n\n  //     // function drawTimeData() {\n  //     //   let x: number;\n  //     //   //console.log(timeData);\n\n  //     //   analyzer.getByteTimeDomainData(timeData); //inject the time data into our timeData array\n  //     //   //1 clear the canvas\n\n  //     //   //set up some canvas drawing\n  //     //   ctx.lineWidth = 3;\n  //     //   ctx.strokeStyle = 'round';\n  //     //   ctx.strokeStyle = '#796EAD80';\n  //     //   ctx?.beginPath();\n  //     //   const sliceWidth = WIDTH / bufferLenth;\n  //     //   x = 0;\n  //     //   ctx?.clearRect(0, 0, WIDTH, HEIGHT);\n  //     //   // timeData.forEach((data, i) => {\n  //     //   //   barHeight = data[i] * 2;\n  //     //   //   ctx.fillStyle = '#796EAD80';\n  //     //   //   ctx?.fillRect(x, canvasEl.height - barHeight, sliceWidth, barHeight);\n  //     //   //   x += sliceWidth;\n  //     //   // });\n\n  //     //   timeData.forEach((data: number, i: number) => {\n  //     //     const v = data / 128;\n  //     //     const y = (v * HEIGHT) / 2;\n  //     //     // Draw the lines\n  //     //     if (i === 0) {\n  //     //       ctx?.moveTo(x, y);\n  //     //     } else {\n  //     //       ctx?.lineTo(x, y);\n  //     //     }\n  //     //     x += sliceWidth;\n  //     //   });\n  //     //   ctx?.stroke();\n  //     //   // console.log(sliceWidth);\n  //     //   requestAnimationFrame(drawTimeData);\n  //     //   //requestAnimationFrame(() => drawTimeData()); //call itself as soon as possible\n  //     // }\n  //     // drawTimeData();\n\n  //     // drawTimeData(timeData);\n  //     //drawTimeData();\n  //     // console.log(src)\n  //     // getAudio(audioLink);\n  //     //audioLink?.play();\n  //   });\n  // });\n\n  //function getAudio(src: HTMLAudioElement) {\n  //const linkAud = src.src;\n  //const audsource = await fetch(linkAud);\n  //const audData = await audsource.arrayBuffer();\n  // const decodedAudio = await audioCtx.decodeAudioData(audData);\n  //decodedAudio.connect(analyzer);\n  //const playSound = audioCtx.createBufferSource(); ////this method create media source like createMediaSouce method\n  //playSound.buffer = decodedAudio;\n  //playSound.connect(analyzer); //////connect the sound source to an analyser\n  //console.log(analyzer);\n  //src.play();\n  // playSound.connect(audioCtx.destination);\n  // playSound.start();\n  // playSound.start(audioCtx.currentTime);\n  //console.log(timeData);\n  //console.log(playSound.connect(analyzer));\n  //console.log(decodedAudio);\n  // audioCtx.createMediaStreamSource(playSound.buffer);\n  //audioCtx.createMediaElementSource();\n  //console.log(decodedAudio); //audiobuffer\n  //const source = audioCtx.createMediaStreamSource(decodedAudio);\n  //source.connect(analyzer);\n  // src.play();\n  // }\n\n  //let barHeight;\n  // let x: number;\n  // function drawTimeData(timeData) {\n  //   console.log(timeData);\n  //   analyzer.getByteTimeDomainData(timeData); //inject the time data into our timeData array\n  //   //1 clear the canvas\n\n  //   //set up some canvas drawing\n\n  //   ctx.lineWidth = 3;\n  //   ctx.strokeStyle = 'round';\n  //   ctx.strokeStyle = '#796EAD80';\n  //   ctx?.beginPath();\n  //   const sliceWidth = WIDTH / bufferLenth;\n  //   x = 0;\n  //   ctx?.clearRect(0, 0, WIDTH, HEIGHT);\n  //   // timeData.forEach((data, i) => {\n  //   //   barHeight = data[i] * 2;\n  //   //   ctx.fillStyle = '#796EAD80';\n  //   //   ctx?.fillRect(x, canvasEl.height - barHeight, sliceWidth, barHeight);\n  //   //   x += sliceWidth;\n  //   // });\n\n  //   timeData.forEach((data: number, i: number) => {\n  //     const v = data / 128;\n  //     const y = (v * HEIGHT) / 2;\n  //     // Draw the lines\n  //     if (i === 0) {\n  //       ctx?.moveTo(x, y);\n  //     } else {\n  //       ctx?.lineTo(x, y);\n  //     }\n  //     x += sliceWidth;\n  //   });\n  //   ctx?.stroke();\n  //   // console.log(sliceWidth);\n  //   //requestAnimationFrame(drawTimeData);\n  //   requestAnimationFrame(() => drawTimeData(timeData)); //call itself as soon as possible\n  // }\n});\n\n// audio.paused ? Audio.play() : Audio.pause();\n// const draw = normalizedData => {\n//   // Set up the canvas\n//   const canvas = document.querySelector(\"canvas\");\n//   const dpr = window.devicePixelRatio || 1;\n//   const padding = 20;\n//   canvas.width = canvas.offsetWidth * dpr;\n//   canvas.height = (canvas.offsetHeight + padding * 2) * dpr;\n//   const ctx = canvas.getContext(\"2d\");\n//   ctx.scale(dpr, dpr);\n//   ctx.translate(0, canvas.offsetHeight / 2 + padding); // Set Y = 0 to be in the middle of the canvas\n\n//   // draw the line segments\n//   const width = canvas.offsetWidth / normalizedData.length;\n//   for (let i = 0; i < normalizedData.length; i++) {\n//     const x = width * i;\n//     let height = normalizedData[i] * canvas.offsetHeight - padding;\n//     if (height < 0) {\n//         height = 0;\n//     } else if (height > canvas.offsetHeight / 2) {\n//         height = height > canvas.offsetHeight / 2;\n//     }\n//     drawLineSegment(ctx, x, height, width, (i + 1) % 2);\n//   }\n// };\n"],
  "mappings": "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",
  "names": ["btn", "audio"]
}
